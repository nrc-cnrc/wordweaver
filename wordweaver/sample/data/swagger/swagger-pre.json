{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://kawennonnis.nrc-cnrc.gc.ca/api/v1"
  }, {
    "url" : "http://localhost:5000/api/v1"
  }],
  "info" : {
    "description" : "This is the Kawennón:nis API that exposes methods needed for running the Kawennón:nis conjugator. If you don’t know what any of this is, you are probably in the wrong place. The API is read-only. Note that example values are randomly generated and should be used to reference type only.",
    "version" : "1.0.1-oas3-multi",
    "title" : "Kawennón:nis API",
    "contact" : {
      "email" : "aidan.pine@nrc-cnrc.gc.ca"
    }
  },
  "tags" : [ {
    "name" : "Verbs"
  }, {
    "name" : "Pronouns"
  }, {
    "name" : "Affixes"
  }, {
    "name" : "Affix Options"
  }, {
    "name" : "Conjugations"
  } ],
  "security" : [ {
    "APIKeyHeader" : [ ]
  } ],
  "paths" : {
    "/verbs" : {
      "get" : {
        "tags" : [ "Verbs" ],
        "summary" : "Get all verbs",
        "description" : "",
        "operationId" : "getVerbs",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Verb"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/verbs/{verbTag}" : {
      "get" : {
        "tags" : [ "Verbs" ],
        "summary" : "Get verb by tag",
        "description" : "",
        "operationId" : "getVerbByTag",
        "parameters" : [ {
          "name" : "verbTag",
          "in" : "path",
          "description" : "slug ID (tag) of Verb to return",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/VerbTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Verb"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          },
          "404" : {
            "description" : "The requested resource was not found on the server."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/pronouns" : {
      "get" : {
        "tags" : [ "Pronouns" ],
        "summary" : "Get all pronouns",
        "description" : "",
        "operationId" : "getPronouns",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pronoun"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/pronouns/{pronounTag}" : {
      "get" : {
        "tags" : [ "Pronouns" ],
        "summary" : "Get pronoun by tag",
        "description" : "",
        "operationId" : "getPronounByTag",
        "parameters" : [ {
          "name" : "pronounTag",
          "in" : "path",
          "description" : "slug ID (tag) of Pronoun to return",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/PronounTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pronoun"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          },
          "404" : {
            "description" : "The requested resource was not found on the server."
          }
        }
      }
    },
    "/affixes" : {
      "get" : {
        "tags" : [ "Affixes" ],
        "summary" : "Get all affixes",
        "description" : "",
        "operationId" : "getAffixes",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Affix"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/affixes/{affixTag}" : {
      "get" : {
        "tags" : [ "Affixes" ],
        "summary" : "Get affix by tag",
        "description" : "",
        "operationId" : "getAffixByTag",
        "parameters" : [ {
          "name" : "affixTag",
          "in" : "path",
          "description" : "slug ID (tag) of Affix to return",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AffixTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Affix"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          },
          "404" : {
            "description" : "The requested resource was not found on the server."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/aff-options" : {
      "get" : {
        "tags" : [ "Affix Options" ],
        "summary" : "Get all affix options",
        "description" : "",
        "operationId" : "getAffoptions",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AffixOption"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/aff-options/{affoptionTag}" : {
      "get" : {
        "tags" : [ "Affix Options" ],
        "summary" : "Get affix option by tag",
        "description" : "",
        "operationId" : "getAffoptionByTag",
        "parameters" : [ {
          "name" : "affoptionTag",
          "in" : "path",
          "description" : "slug ID (tag) of Affix Option to return",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AffOptionTags"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AffixOption"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          },
          "404" : {
            "description" : "The requested resource was not found on the server."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/conjugations" : {
      "get" : {
        "tags" : [ "Conjugations" ],
        "summary" : "Get all conjugations",
        "description" : "",
        "operationId" : "getConjugations",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "index of upper limit of Verbs to provide conjugations for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 5
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "index of lower limit of Verbs to provide conjugations for",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 0
          }
        }, {
          "name" : "agent",
          "in" : "query",
          "description" : "slug ID (tag) of Pronoun to use as Agent",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PronounTags"
            }
          }
        }, {
          "name" : "patient",
          "in" : "query",
          "description" : "slug ID (tag) of Pronoun to use as Patient",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PronounTags"
            }
          }
        }, {
          "name" : "verb",
          "in" : "query",
          "description" : "slug ID (tag) of verb to use",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VerbTags"
            }
          }
        }, {
          "name" : "aff-option",
          "in" : "query",
          "description" : "slug ID (tag) of affix option to use",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AffOptionTags"
            }
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Meant for debugging - returns markers instead of normal response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "markers",
          "in" : "query",
          "description" : "Meant for debugging - returns markers instead of normal response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "plain",
          "in" : "query",
          "description" : "Meant for debugging - returns plain text instead of normal response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "docx",
          "in" : "query",
          "description" : "Returns a docx file of the conjugations as an attachment",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "latex",
          "in" : "query",
          "description" : "Returns a formatted tex file of the conjugations as an attachment",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Conjugation"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          },
          "404" : {
            "description" : "Resource not found. check spelling of slug and whether conjugation is grammatical."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    },
    "/conjugations/{verbTag}" : {
      "get" : {
        "tags" : [ "Conjugations" ],
        "summary" : "Get conjugations by verb",
        "description" : "",
        "operationId" : "getConjugationsByVerbTag",
        "parameters" : [ {
          "name" : "verbTag",
          "in" : "path",
          "description" : "slug ID (tag) of Verb",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/VerbTags"
          }
        }, {
          "name" : "agent",
          "in" : "query",
          "description" : "slug ID (tag) of Pronoun to use as Agent",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PronounTags"
            }
          }
        }, {
          "name" : "patient",
          "in" : "query",
          "description" : "slug ID (tag) of Pronoun to use as Patient",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PronounTags"
            }
          }
        }, {
          "name" : "aff-option",
          "in" : "query",
          "description" : "slug ID (tag) of affix option to use",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AffOptionTags"
            }
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Meant for debugging - returns markers instead of normal response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "markers",
          "in" : "query",
          "description" : "Meant for debugging - returns markers instead of normal response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "plain",
          "in" : "query",
          "description" : "Meant for debugging - returns plain text instead of normal response",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "docx",
          "in" : "query",
          "description" : "Returns a docx file of the conjugations as an attachment",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "latex",
          "in" : "query",
          "description" : "Returns a formatted tex file of the conjugations as an attachment",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Conjugation"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API key. Please contact the developer."
          },
          "404" : {
            "description" : "Resource not found. check spelling of slug and whether conjugation is grammatical."
          }
        },
        "security" : [ {
          "APIKeyHeader" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "VerbTags" : {
        "type" : "string",
        "enum" : [ "athonte", "atyer" ]
      },
      "PronounTags" : {
        "type" : "string",
        "enum" : [ "1-sg", "2-sg" ]
      },
      "AffixTags" : {
        "type" : "string",
        "enum" : [ "quant", "fut" ]
      },
      "AffOptionTags" : {
        "type" : "string",
        "enum" : [ "habpres", "defpast" ]
      },
      "Verb" : {
        "type" : "object",
        "required" : [ "gloss", "required_affixes", "root", "tag", "thematic_relation" ],
        "properties" : {
          "gloss" : {
            "type" : "string",
            "example" : "hear"
          },
          "root" : {
            "type" : "string",
            "example" : "on'wehskwen"
          },
          "required_affixes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Affix"
            }
          },
          "tag" : {
            "$ref" : "#/components/schemas/VerbTags"
          },
          "thematic_relation" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "red", "blue", "purple" ]
            }
          },
          "position" : {
            "type" : "integer",
            "example" : 0
          }
        }
      },
      "Affix" : {
        "type" : "object",
        "required" : [ "gloss", "morphemes", "tag", "type" ],
        "properties" : {
          "gloss" : {
            "type" : "string"
          },
          "morphemes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "value", "position" ],
              "properties" : {
                "value" : {
                  "type" : "string"
                },
                "position" : {
                  "type" : "integer"
                }
              }
            }
          },
          "tag" : {
            "$ref" : "#/components/schemas/AffixTags"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "preproniminal_prefix", "derivational_suffix", "post_aspectual_suffix", "aspect", "tmp_affix" ]
          }
        }
      },
      "AffixOption" : {
        "type" : "object",
        "required" : [ "affixes", "gloss", "tag" ],
        "properties" : {
          "affixes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Affix"
            }
          },
          "gloss" : {
            "type" : "string"
          },
          "tag" : {
            "$ref" : "#/components/schemas/AffOptionTags"
          }
        }
      },
      "Pronoun" : {
        "type" : "object",
        "required" : [ "gender", "gloss", "inclusivity", "number", "role", "obj_gloss", "person", "value", "tag" ],
        "properties" : {
          "gender" : {
            "type" : "string",
            "enum" : [ "M", "F", "FZ", "N", "''" ]
          },
          "gloss" : {
            "type" : "string",
            "example" : "She"
          },
          "inclusivity" : {
            "type" : "string",
            "enum" : [ "incl", "excl", "''" ]
          },
          "number" : {
            "type" : "string",
            "enum" : [ "SG", "DL", "PL" ]
          },
          "role" : {
            "type" : "string",
            "enum" : [ "agent", "patient", "''" ]
          },
          "obj_gloss" : {
            "type" : "string",
            "example" : "Me"
          },
          "person" : {
            "type" : "string",
            "enum" : [ "1", "2", "3" ]
          },
          "value" : {
            "type" : "string",
            "example" : "wak"
          },
          "position" : {
            "type" : "integer",
            "example" : 1
          },
          "tag" : {
            "$ref" : "#/components/schemas/PronounTags"
          }
        }
      },
      "Conjugation" : {
        "type" : "object",
        "required" : [ "affopt", "aspect", "pronoun", "required_affixes", "root", "tmp_affix" ],
        "properties" : {
          "affopt" : {
            "$ref" : "#/components/schemas/AffOptionTags"
          },
          "aspect" : {
            "type" : "object",
            "required" : [ "position", "value" ],
            "properties" : {
              "position" : {
                "type" : "integer"
              },
              "value" : {
                "type" : "string"
              }
            }
          },
          "pronoun" : {
            "type" : "object",
            "required" : [ "agent", "patient", "position", "value" ],
            "properties" : {
              "agent" : {
                "$ref" : "#/components/schemas/PronounTags"
              },
              "patient" : {
                "$ref" : "#/components/schemas/PronounTags"
              },
              "position" : {
                "type" : "integer"
              },
              "value" : {
                "type" : "string"
              }
            }
          },
          "required_affixes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Affix"
            }
          },
          "root" : {
            "type" : "object",
            "required" : [ "position", "tag", "value" ],
            "properties" : {
              "position" : {
                "type" : "integer"
              },
              "tag" : {
                "$ref" : "#/components/schemas/VerbTags"
              },
              "value" : {
                "type" : "string"
              }
            }
          },
          "tmp_affix" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "position", "value" ],
              "properties" : {
                "position" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "APIKeyHeader" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-API-Key"
      }
    }
  }
}